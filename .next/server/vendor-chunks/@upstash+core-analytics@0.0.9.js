"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@upstash+core-analytics@0.0.9";
exports.ids = ["vendor-chunks/@upstash+core-analytics@0.0.9"];
exports.modules = {

/***/ "(action-browser)/./node_modules/.pnpm/@upstash+core-analytics@0.0.9/node_modules/@upstash/core-analytics/dist/index.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@upstash+core-analytics@0.0.9/node_modules/@upstash/core-analytics/dist/index.js ***!
  \*************************************************************************************************************/
/***/ ((module) => {

eval("var g=Object.defineProperty;var k=Object.getOwnPropertyDescriptor;var _=Object.getOwnPropertyNames;var w=Object.prototype.hasOwnProperty;var y=(l,e)=>{for(var t in e)g(l,t,{get:e[t],enumerable:!0})},A=(l,e,t,n)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let s of _(e))!w.call(l,s)&&s!==t&&g(l,s,{get:()=>e[s],enumerable:!(n=k(e,s))||n.enumerable});return l};var S=l=>A(g({},\"__esModule\",{value:!0}),l);var x={};y(x,{Analytics:()=>b});module.exports=S(x);var p=`\nlocal key = KEYS[1]\nlocal field = ARGV[1]\n\nlocal data = redis.call(\"ZRANGE\", key, 0, -1, \"WITHSCORES\")\nlocal count = {}\n\nfor i = 1, #data, 2 do\n  local json_str = data[i]\n  local score = tonumber(data[i + 1])\n  local obj = cjson.decode(json_str)\n\n  local fieldValue = obj[field]\n\n  if count[fieldValue] == nil then\n    count[fieldValue] = score\n  else\n    count[fieldValue] = count[fieldValue] + score\n  end\nend\n\nlocal result = {}\nfor k, v in pairs(count) do\n  table.insert(result, {k, v})\nend\n\nreturn result\n`,f=`\nlocal prefix = KEYS[1]\nlocal first_timestamp = tonumber(ARGV[1])\nlocal increment = tonumber(ARGV[2])\nlocal num_timestamps = tonumber(ARGV[3])\nlocal num_elements = tonumber(ARGV[4])\n\nlocal keys = {}\nfor i = 1, num_timestamps do\n  local timestamp = first_timestamp - (i - 1) * increment\n  table.insert(keys, prefix .. \":\" .. timestamp)\nend\n\n-- get the union of the groups\nlocal zunion_params = {\"ZUNION\", num_timestamps, unpack(keys)}\ntable.insert(zunion_params, \"WITHSCORES\")\nlocal result = redis.call(unpack(zunion_params))\n\n-- select num_elements many items\nlocal true_group = {}\nlocal false_group = {}\nlocal denied_group = {}\nlocal true_count = 0\nlocal false_count = 0\nlocal denied_count = 0\nlocal i = #result - 1\n\n-- iterate over the results\nwhile (true_count + false_count + denied_count) < (num_elements * 3) and 1 <= i do\n  local score = tonumber(result[i + 1])\n  if score > 0 then\n    local element = result[i]\n    if string.find(element, \"success\\\\\":true\") and true_count < num_elements then\n      table.insert(true_group, {score, element})\n      true_count = true_count + 1\n    elseif string.find(element, \"success\\\\\":false\") and false_count < num_elements then\n      table.insert(false_group, {score, element})\n      false_count = false_count + 1\n    elseif string.find(element, \"success\\\\\":\\\\\"denied\") and denied_count < num_elements then\n      table.insert(denied_group, {score, element})\n      denied_count = denied_count + 1\n    end\n  end\n  i = i - 2\nend\n\nreturn {true_group, false_group, denied_group}\n`,h=`\nlocal prefix = KEYS[1]\nlocal first_timestamp = tonumber(ARGV[1])\nlocal increment = tonumber(ARGV[2])\nlocal num_timestamps = tonumber(ARGV[3])\n\nlocal keys = {}\nfor i = 1, num_timestamps do\n  local timestamp = first_timestamp - (i - 1) * increment\n  table.insert(keys, prefix .. \":\" .. timestamp)\nend\n\n-- get the union of the groups\nlocal zunion_params = {\"ZUNION\", num_timestamps, unpack(keys)}\ntable.insert(zunion_params, \"WITHSCORES\")\nlocal result = redis.call(unpack(zunion_params))\n\nreturn result\n`;var b=class{redis;prefix;bucketSize;constructor(e){this.redis=e.redis,this.prefix=e.prefix??\"@upstash/analytics\",this.bucketSize=this.parseWindow(e.window)}validateTableName(e){if(!/^[a-zA-Z0-9_-]+$/.test(e))throw new Error(`Invalid table name: ${e}. Table names can only contain letters, numbers, dashes and underscores.`)}parseWindow(e){if(typeof e==\"number\"){if(e<=0)throw new Error(`Invalid window: ${e}`);return e}let t=/^(\\d+)([smhd])$/;if(!t.test(e))throw new Error(`Invalid window: ${e}`);let[,n,s]=e.match(t),i=parseInt(n);switch(s){case\"s\":return i*1e3;case\"m\":return i*1e3*60;case\"h\":return i*1e3*60*60;case\"d\":return i*1e3*60*60*24;default:throw new Error(`Invalid window unit: ${s}`)}}getBucket(e){let t=e??Date.now();return Math.floor(t/this.bucketSize)*this.bucketSize}async ingest(e,...t){this.validateTableName(e),await Promise.all(t.map(async n=>{let s=this.getBucket(n.time),i=[this.prefix,e,s].join(\":\");await this.redis.zincrby(i,1,JSON.stringify({...n,time:void 0}))}))}formatBucketAggregate(e,t,n){let s={};return e.forEach(([i,r])=>{t==\"success\"&&(i=i===1?\"true\":i===null?\"false\":i),s[t]=s[t]||{},s[t][(i??\"null\").toString()]=r}),{time:n,...s}}async aggregateBucket(e,t,n){this.validateTableName(e);let s=this.getBucket(n),i=[this.prefix,e,s].join(\":\"),r=await this.redis.eval(p,[i],[t]);return this.formatBucketAggregate(r,t,s)}async aggregateBuckets(e,t,n,s){this.validateTableName(e);let i=this.getBucket(s),r=[];for(let o=0;o<n;o+=1)r.push(this.aggregateBucket(e,t,i)),i=i-this.bucketSize;return Promise.all(r)}async aggregateBucketsWithPipeline(e,t,n,s,i){this.validateTableName(e),i=i??48;let r=this.getBucket(s),o=[],c=this.redis.pipeline(),u=[];for(let a=1;a<=n;a+=1){let d=[this.prefix,e,r].join(\":\");c.eval(p,[d],[t]),o.push(r),r=r-this.bucketSize,(a%i==0||a==n)&&(u.push(c.exec()),c=this.redis.pipeline())}return(await Promise.all(u)).flat().map((a,d)=>this.formatBucketAggregate(a,t,o[d]))}async getAllowedBlocked(e,t,n){this.validateTableName(e);let s=[this.prefix,e].join(\":\"),i=this.getBucket(n),r=await this.redis.eval(h,[s],[i,this.bucketSize,t]),o={};for(let c=0;c<r.length;c+=2){let u=r[c],m=u.identifier,a=+r[c+1];o[m]||(o[m]={success:0,blocked:0}),o[m][u.success?\"success\":\"blocked\"]=a}return o}async getMostAllowedBlocked(e,t,n,s){this.validateTableName(e);let i=[this.prefix,e].join(\":\"),r=this.getBucket(s),[o,c,u]=await this.redis.eval(f,[i],[r,this.bucketSize,t,n]);return{allowed:this.toDicts(o),ratelimited:this.toDicts(c),denied:this.toDicts(u)}}toDicts(e){let t=[];for(let n=0;n<e.length;n+=1){let s=+e[n][0],i=e[n][1];t.push({identifier:i.identifier,count:s})}return t}};0&&(0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/.pnpm/@upstash+core-analytics@0.0.9/node_modules/@upstash/core-analytics/dist/index.js\n");

/***/ })

};
;